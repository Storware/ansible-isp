---
- name: Show IBM Spectrum Protect Server URL
  debug:
    msg: "IBM Spectrum Protect Server URL: {{ isp_server_download_url }}"

- name: Make sure temporary installation directory exists
  file:
    state: directory
    path: "{{ isp_server_installer_local_dir }}"
    mode: '0770'

- name: Download IBM Spectrum Protect Server
  get_url:
    url: "{{ isp_server_download_url }}"
    dest: "{{ isp_server_installer_local_path }}"
    mode: "0554"

- name: Install required dependencies
  package:
    name:
      - ksh
      - libnsl
      - libaio
      - libstdc++-devel.i686
      - libstdc++-devel.x86_64
      - numactl-libs

- name: Extact IBM Spectrum Protect Server installer files
  shell:
    cmd: "./{{ isp_server_installer_filename }}"
    chdir: "{{ isp_server_installer_local_dir }}"
    creates: "{{ isp_server_installer_local_dir }}/install.sh"

- name: Find IBM Installation Manager agent files
  find:
    paths: "{{ isp_server_installer_local_dir }}/im64/Offerings"
    patterns: 'com.ibm.cic.agent_*[0-9].jar'
  register: find_output

- name: Detect IBM Installation Manager version
  set_fact:
    imm_version: "{{ find_output.files[0].path | regex_replace('.*/com.ibm.cic.agent_([0-9_.]+)*[.].*', '\\1') }}"

- name: Show IBM Installation Manager version
  debug:
    msg: "IBM Installation Manager version: {{ imm_version }}"

- name: Prepare IBM Spectrum Protect Server installer response file
  template:
    src: "isp.resp.xml.j2"
    dest: "{{ isp_server_installer_local_dir }}/isp.resp.xml"

- name: Install IBM Spectrum Protect Server
  shell:
    cmd: "./install.sh -s -input isp.resp.xml -acceptLicense -vmargs '-DBYPASS_TSM_REQ_CHECKS=true'"
    chdir: "{{ isp_server_installer_local_dir }}"
    creates: "{{ isp_dir }}/server"

- name: Check if DB2 instance exists
  shell: "{{ db2ilist_bin }}"
  register: db2ilist_output
  changed_when: false

- name: Initialize DB2 instance
  shell: "{{ db2icrt_bin }} -a server -u {{ isp_user }} {{ isp_instance_name }}"
  when: isp_instance_name not in db2ilist_output.stdout

- name: Fetch DB manager config
  become: yes
  become_user: "{{ isp_user }}"
  shell: "source ~/.bashrc && db2 get dbm cfg"
  register: db2_get_dbm_cfg_output
  changed_when: false

- name: Show config
  debug:
    var: db2_get_dbm_cfg_output.stdout_lines

- name: Extract default database path
  set_fact:
    db2_dftdbpath: "{{ db2_get_dbm_cfg_output.stdout_lines | select('match','.*\\(DFTDBPATH\\).*') | map('regex_replace','^.*\\s+=\\s+(.*)','\\1') | first }}"

- name: Show default database path
  debug:
    var: db2_dftdbpath

- name: Update default database path to IBM Spectrum Protect instance path
  become: yes
  become_user: "{{ isp_user }}"
  shell: "source ~/.bashrc && db2 update dbm cfg using dftdbpath '{{ isp_instance_path }}'"
  register: db2_get_dbm_cfg_output
  when: db2_dftdbpath != isp_instance_path

- name: Ensure IBM Spectrum Protect environment variables for database manager are set in userprofile file
  blockinfile:
    path: "{{ isp_user_home }}/sqllib/userprofile"
    block: |
      DSMI_CONFIG={{ isp_instance_path }}/tsmdbmgr.opt
      DSMI_DIR={{ isp_dir }}/server/bin/dbbkapi
      DSMI_LOG={{ isp_instance_path }}
      export DSMI_CONFIG DSMI_DIR DSMI_LOG

- name: Ensure IBM Spectrum Protect environment variables for database manager are set in usercshrc file
  blockinfile:
    path: "{{ isp_user_home }}/sqllib/usercshrc"
    block: |
      setenv DSMI_CONFIG={{ isp_instance_path }}/tsmdbmgr.opt
      setenv DSMI_DIR={{ isp_dir }}/server/bin/dbbkapi
      setenv DSMI_LOG={{ isp_instance_path }}

- name: Update database manager opt file (tsmdbmgr.opt)
  lineinfile:
    dest: "{{ isp_instance_path }}/tsmdbmgr.opt"
    create: true
    owner:
    regexp: '^SERVERNAME\s+'
    line: "SERVERNAME\t{{ isp_dbmgropt_servername | upper }}"
    state: present

- name: Update dsm.sys file for database manager
  blockinfile:
    path: "{{ isp_dir }}/server/bin/dbbkapi/dsm.sys"
    create: true
    block: |
      servername {{ isp_dbmgropt_servername | upper }}
      commmethod tcpip
      tcpserveraddr localhost
      tcpport {{ isp_port }}
      errorlogname {{ isp_instance_path }}/tsmdbmgr.log
      nodename $$_TSMDBMGR_$$

- name: Check if DB2NOEXITLIST DB2 parameter is set
  shell: "source ~/.bashrc && db2set"
  become: yes
  become_user: "{{ isp_user }}"
  register: db2set_output
  changed_when: false

- name: Check if DB2NOEXITLIST variable is set to ON
  set_fact:
    db2noexitlist_set: "{{ db2set_output.stdout_lines | select('match','DB2NOEXITLIST=ON') | list | length == 1 }}"

- name: Set DB2NOEXITLIST DB2 parameter
  become: yes
  become_user: "{{ isp_user }}"
  shell: "source ~/.bashrc && db2set DB2NOEXITLIST=ON"
  when: not db2noexitlist_set

- name: Format database
  shell:
    cmd: "source ~/.bashrc && dsmserv format dbdir={{ isp_db_path }} activelogsize={{ isp_db_activelogsize }} activelogdirectory={{ isp_activelog_path }} archlogdirectory={{ isp_archlog_path }}"
    chdir: "{{ isp_instance_path }}"
    creates: "{{ isp_db_path }}/{{ isp_instance_name }}/NODE0000/.SQLCRT.FLG"
  become: yes
  become_user: "{{ isp_user }}"

- name: Copy service script
  copy:
    src: "{{ isp_server_service_script_template_path }}"
    dest: "{{ isp_dir }}/server/bin/{{ isp_instance_name }}"
    mode: "0755"
    remote_src: true

- name: Update instance directory variable in the service script
  lineinfile:
    path: "{{ isp_dir }}/server/bin/{{ isp_instance_name }}"
    regexp: '^instance_dir=".*"$'
    line: 'instance_dir="{{ isp_instance_path }}"'
    state: present

- name: Install systemd unit file
  template:
    src: service_unit.j2
    dest: "/etc/systemd/system/{{ isp_instance_name }}.service"

- name: Start IBM Spectrum Protect Server
  service:
    name: "{{ isp_instance_name }}"
    daemon-reload: yes
    state: started